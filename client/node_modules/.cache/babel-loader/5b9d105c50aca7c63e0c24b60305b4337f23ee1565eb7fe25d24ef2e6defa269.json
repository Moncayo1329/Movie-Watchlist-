{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monca\\\\BackendProjects\\\\watchlist\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Movies from \"./Movie\"; // Componente para mostrar la película\nimport Form from \"./movieForm\"; // Componente para el formulario\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]); // Lista de películas\n  const [error, setError] = useState(null); // Manejo de errores\n\n  // Al cargar la aplicación, leer las películas desde localStorage.\n  useEffect(() => {\n    const storedMovies = localStorage.getItem(\"movies\"); // Obtener las películas del localStorage\n    if (storedMovies) {\n      setMovies(JSON.parse(storedMovies)); // Parsear y asignar las películas al estado\n    }\n  }, []); // Este useEffect solo se ejecuta al montar el componente\n\n  // Guardar las películas en localStorage cada vez que cambien\n  useEffect(() => {\n    if (movies.length > 0) {\n      localStorage.setItem(\"movies\", JSON.stringify(movies)); // Guardar las películas en localStorage\n    }\n  }, [movies]); // Este useEffect se ejecuta cada vez que el estado `movies` cambie\n\n  // Función para obtener detalles de una película desde la API de TMDb\n  const fetchMovieDetails = async movieTitle => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/movies/${movieTitle}`); // Llama a tu backend\n      const movieData = response.data; // Se asume que la respuesta es un objeto con datos de la película\n\n      if (movieData) {\n        return {\n          title: movieData.title,\n          description: movieData.description,\n          image: movieData.image // La URL de la imagen que ya está formateada desde el backend\n        };\n      } else {\n        setError(\"Película no encontrada\");\n        return null;\n      }\n    } catch (err) {\n      setError(\"Hubo un error al obtener los detalles de la película\");\n      console.error(err);\n      return null;\n    }\n  };\n\n  // Función para agregar una nueva película\n  const addmovie = async movieTitle => {\n    const movieDetails = await fetchMovieDetails(movieTitle);\n    if (movieDetails) {\n      setMovies(prevMovies => [...prevMovies, movieDetails]); // Añadir la nueva película al estado\n      setError(null); // Limpiar cualquier mensaje de error\n\n      // Ahora guardamos la película en la base de datos del backend\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/v1/movies\", {\n          name: movieDetails.title,\n          completed: false // Establecer como no completada inicialmente\n        });\n        setMovies(prevMovies => [...prevMovies, response.data.movie]); // Añadir la nueva película al estado\n      } catch (error) {\n        setError(\"Hubo un error al agregar la película\");\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Movie Watch List by Mike\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addmovie: addmovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), \" \", movies.map((movie, index) => /*#__PURE__*/_jsxDEV(Movies, {\n      task: movie\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) // Mostrar todas las películas\n    )]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LDBeDdhWUhPqSW1ynG0CeYYjFL0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Movies","Form","jsxDEV","_jsxDEV","App","_s","movies","setMovies","error","setError","storedMovies","localStorage","getItem","JSON","parse","length","setItem","stringify","fetchMovieDetails","movieTitle","response","get","movieData","data","title","description","image","err","console","addmovie","movieDetails","prevMovies","post","name","completed","movie","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","task","_c","$RefreshReg$"],"sources":["C:/Users/monca/BackendProjects/watchlist/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Movies from \"./Movie\"; // Componente para mostrar la película\nimport Form from \"./movieForm\"; // Componente para el formulario\n\nfunction App() {\n  const [movies, setMovies] = useState([]); // Lista de películas\n  const [error, setError] = useState(null); // Manejo de errores\n\n  // Al cargar la aplicación, leer las películas desde localStorage.\n  useEffect(() => {\n    const storedMovies = localStorage.getItem(\"movies\"); // Obtener las películas del localStorage\n    if (storedMovies) {\n      setMovies(JSON.parse(storedMovies)); // Parsear y asignar las películas al estado\n    }\n  }, []); // Este useEffect solo se ejecuta al montar el componente\n\n  // Guardar las películas en localStorage cada vez que cambien\n  useEffect(() => {\n    if (movies.length > 0) {\n      localStorage.setItem(\"movies\", JSON.stringify(movies)); // Guardar las películas en localStorage\n    }\n  }, [movies]); // Este useEffect se ejecuta cada vez que el estado `movies` cambie\n\n  // Función para obtener detalles de una película desde la API de TMDb\n  const fetchMovieDetails = async (movieTitle) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/movies/${movieTitle}`); // Llama a tu backend\n      const movieData = response.data; // Se asume que la respuesta es un objeto con datos de la película\n\n      if (movieData) {\n        return {\n          title: movieData.title,\n          description: movieData.description,\n          image: movieData.image, // La URL de la imagen que ya está formateada desde el backend\n        };\n      } else {\n        setError(\"Película no encontrada\");\n        return null;\n      }\n    } catch (err) {\n      setError(\"Hubo un error al obtener los detalles de la película\");\n      console.error(err);\n      return null;\n    }\n  };\n\n  // Función para agregar una nueva película\n  const addmovie = async (movieTitle) => {\n    const movieDetails = await fetchMovieDetails(movieTitle);\n    if (movieDetails) {\n      setMovies((prevMovies) => [...prevMovies, movieDetails]); // Añadir la nueva película al estado\n      setError(null); // Limpiar cualquier mensaje de error\n      \n      // Ahora guardamos la película en la base de datos del backend\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/v1/movies\", {\n          name: movieDetails.title,\n          completed: false, // Establecer como no completada inicialmente\n        });\n        setMovies((prevMovies) => [...prevMovies, response.data.movie]); // Añadir la nueva película al estado\n      } catch (error) {\n        setError(\"Hubo un error al agregar la película\");\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"task-form\">\n      <h4>Movie Watch List by Mike</h4>\n      <Form addmovie={addmovie} />\n      {error && <p className=\"error-message\">{error}</p>} {/* Mostrar errores si existen */}\n      {movies.map((movie, index) => (\n        <Movies task={movie} key={index} /> // Mostrar todas las películas\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,SAAS,CAAC,CAAC;AAC9B,OAAOC,IAAI,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrD,IAAIF,YAAY,EAAE;MAChBH,SAAS,CAACM,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAb,SAAS,CAAC,MAAM;IACd,IAAIS,MAAM,CAACS,MAAM,GAAG,CAAC,EAAE;MACrBJ,YAAY,CAACK,OAAO,CAAC,QAAQ,EAAEH,IAAI,CAACI,SAAS,CAACX,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1D;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd;EACA,MAAMY,iBAAiB,GAAG,MAAOC,UAAU,IAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,oCAAoCF,UAAU,EAAE,CAAC,CAAC,CAAC;MACpF,MAAMG,SAAS,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAEjC,IAAID,SAAS,EAAE;QACb,OAAO;UACLE,KAAK,EAAEF,SAAS,CAACE,KAAK;UACtBC,WAAW,EAAEH,SAAS,CAACG,WAAW;UAClCC,KAAK,EAAEJ,SAAS,CAACI,KAAK,CAAE;QAC1B,CAAC;MACH,CAAC,MAAM;QACLjB,QAAQ,CAAC,wBAAwB,CAAC;QAClC,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZlB,QAAQ,CAAC,sDAAsD,CAAC;MAChEmB,OAAO,CAACpB,KAAK,CAACmB,GAAG,CAAC;MAClB,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA,MAAME,QAAQ,GAAG,MAAOV,UAAU,IAAK;IACrC,MAAMW,YAAY,GAAG,MAAMZ,iBAAiB,CAACC,UAAU,CAAC;IACxD,IAAIW,YAAY,EAAE;MAChBvB,SAAS,CAAEwB,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAED,YAAY,CAAC,CAAC,CAAC,CAAC;MAC1DrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEhB;MACA,IAAI;QACF,MAAMW,QAAQ,GAAG,MAAMrB,KAAK,CAACiC,IAAI,CAAC,qCAAqC,EAAE;UACvEC,IAAI,EAAEH,YAAY,CAACN,KAAK;UACxBU,SAAS,EAAE,KAAK,CAAE;QACpB,CAAC,CAAC;QACF3B,SAAS,CAAEwB,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAEX,QAAQ,CAACG,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;MACnE,CAAC,CAAC,OAAO3B,KAAK,EAAE;QACdC,QAAQ,CAAC,sCAAsC,CAAC;QAChDmB,OAAO,CAACpB,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF,CAAC;EAED,oBACEL,OAAA;IAAKiC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlC,OAAA;MAAAkC,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCtC,OAAA,CAACF,IAAI;MAAC4B,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3BjC,KAAK,iBAAIL,OAAA;MAAGiC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAE7B;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC,EACnDnC,MAAM,CAACoC,GAAG,CAAC,CAACP,KAAK,EAAEQ,KAAK,kBACvBxC,OAAA,CAACH,MAAM;MAAC4C,IAAI,EAAET;IAAM,GAAMQ,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;IACrC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACpC,EAAA,CAzEQD,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AA2EZ,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}